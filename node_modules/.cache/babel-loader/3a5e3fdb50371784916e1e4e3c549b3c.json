{"ast":null,"code":"import _classCallCheck from \"/Users/george/Desktop/code/react-memory-game/memory-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/george/Desktop/code/react-memory-game/memory-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/george/Desktop/code/react-memory-game/memory-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/george/Desktop/code/react-memory-game/memory-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/george/Desktop/code/react-memory-game/memory-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/george/Desktop/code/react-memory-game/memory-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Header from \"./components/Header\";\nimport characters from \"./characters.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      characters: characters.map(function (a) {\n        return [Math.random(), a];\n      }).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (a) {\n        return a[1];\n      }),\n      selectedIds: [],\n      score: 0\n    };\n\n    _this.guessingFunction = function (key) {\n      var currentId = key;\n      var selectIds = _this.state.selectedIds;\n      console.log(selectIds.length);\n\n      for (var i = 0; i < selectIds.length; i++) {\n        if (selectIds[i] === currentId) {\n          console.log('selected');\n\n          if (window.confirm('Already Guessed! Would you like to play again?')) {\n            window.location.reload();\n          }\n        }\n      }\n\n      selectIds.push(key);\n      var characters = _this.state.characters; // WORKING RANDOMIZE FUNCTION (How does it work???)\n\n      characters = characters.map(function (a) {\n        return [Math.random(), a];\n      }).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (a) {\n        return a[1];\n      });\n      console.log(characters);\n\n      _this.setState({\n        characters: characters,\n        selectedIds: selectIds\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), this.state.characters.map(function (character) {\n        return React.createElement(CharacterCard, {\n          key: character.id,\n          id: character.id,\n          name: character.name,\n          image: character.image,\n          guessCharacter: _this2.guessingFunction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/george/Desktop/code/react-memory-game/memory-game/src/App.js"],"names":["React","Component","Wrapper","CharacterCard","Header","characters","App","state","map","a","Math","random","sort","b","selectedIds","score","guessingFunction","key","currentId","selectIds","console","log","length","i","window","confirm","location","reload","push","setState","character","id","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\"\nimport CharacterCard from \"./components/CharacterCard\";\nimport Header from \"./components/Header\"\nimport characters from \"./characters.json\";\n\nclass App extends Component{\n    state = {\n        characters: characters.map((a) => [Math.random(),a])\n        .sort((a,b) => a[0]-b[0])\n        .map((a) => a[1]),\n        selectedIds: [],\n        score: 0\n    };\n\n    guessingFunction = (key) => {\n        let currentId = key;\n        let selectIds = this.state.selectedIds;\n        console.log(selectIds.length)\n        for(let i = 0; i <selectIds.length; i++){\n            if(selectIds[i] === currentId){\n                console.log('selected')\n                if(window.confirm('Already Guessed! Would you like to play again?')){\n                    window.location.reload();\n                }\n            }\n        }\n        selectIds.push(key);\n        let characters=this.state.characters;\n\n\n        // WORKING RANDOMIZE FUNCTION (How does it work???)\n        characters = characters.map((a) => [Math.random(),a])\n            .sort((a,b) => a[0]-b[0])\n            .map((a) => a[1]);\n\n        console.log(characters)\n        this.setState({\n            characters: characters,\n            selectedIds: selectIds\n        })\n    }\n\n    render(){\n        return(\n            <Wrapper>\n                <Header></Header>\n                {this.state.characters.map( character =>(\n                    <CharacterCard\n                        key = {character.id}\n                        id = {character.id}\n                        name = {character.name}\n                        image = {character.image}\n                        guessCharacter = {this.guessingFunction}\n                    />\n                ))}\n            </Wrapper>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}